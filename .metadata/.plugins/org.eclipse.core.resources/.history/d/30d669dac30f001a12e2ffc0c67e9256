package com.perscholas.css_selectors.selenium_tests;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumXPathAxesTest {
	
	private static WebDriver driver;
	@BeforeClass
	public static void setUp() {
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\Student\\Desktop\\libraries_and_tools\\chromedriver.exe");
		driver = new ChromeDriver();
		driver.get("http://localhost:8080/Selenium_CSS_Selectors/HomeServlet/xPath1");
	}
	@AfterClass
	public static void shutDown() {
		driver.close();
	}
	
	@Test
	public void xPathPreceding() {
		/* The "preceding" axes method locates all elements that come before 
		 * the target element (@id='div2'), except for ancestors, attribute nodes 
		 * and namespace nodes. It does not include the target element, but will 
		 * include it's own children and grandchildren. */
		List<WebElement> elementList;
		StringBuilder sb = new StringBuilder();
		String tagSequence;
		
		elementList = driver.findElements(By.xpath("//div[@id='div2']//preceding::*"));
		for (WebElement we : elementList) {
			sb.append(we.getTagName() + " ");
		}
		tagSequence = sb.toString().trim();
		assertThat(tagSequence, equalTo("head meta title header h1 nav a a form input "
				+ "input div ul li li ul li li div p p div p p"));
		/* Notice that all four p tags are included which are children of the target 
		 * element, but the target itself is not included. The <body> and <html> tags 
		 * are also not included because they are ancestors to the target element */
		
		/* We can filter the search to return a specific type of tag by replacing the 
		 * asterisk with a tag name. */
		sb.setLength(0);
		elementList = driver.findElements(By.xpath("//div[@id='div2']//preceding::li"));
		for (WebElement we : elementList) {
			sb.append(we.getTagName() + " ");
		}
		tagSequence = sb.toString().trim();
		assertThat(tagSequence, equalTo("li li li li"));
		/* We can also specify the position of a particular preceding element by 
		 * counting from the target element and placing an integer argument in 
		 * square brackets. The following statement will locate the second <li> 
		 * element preceding from the target element (i.e., the third <li> element). */
		WebElement target = driver.findElement(By.xpath("//div[@id='div2']//"
				+ "preceding::li[2]"));
		assertThat(target.getText(), equalTo("div1 ul2 li1"));
	}
	
	
}
