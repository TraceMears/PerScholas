package mears.trace.stats_application.repositories.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import mears.trace.stats_application.models.Fighter;
import mears.trace.stats_application.models.User;
import mears.trace.stats_application.repositories.UserRepository;

@Repository
public class MariaDBUserRepository implements UserRepository {

	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	
	private final class UserMapper implements RowMapper<User> {
		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			User u = new User();
			u.setUsername(rs.getString(1));
			u.setPassword(rs.getString(2));
			u.setCount(rs.getInt(3));
			return u;
		}
	}
	
	@Override
	public Boolean login(String user, String pass) {

		String selectUser = "SELECT * FROM user";
		List<User> result = mariaDbJdbcTemplate.query(selectUser, 
				new UserMapper());
		
		if( user.equals(result.get(0).getUsername()) && pass.equals(result.get(0).getPassword()) ) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public Integer createUser(User u) {
		Integer id = -1;
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("user", u.getUsername());
		params.addValue("pass", u.getPassword());
		String createUserQuery = "INSERT into user (username, password) VALUES "
				+ "(:user,:pass)";
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createUserQuery, 
				params, keyHolder);
		if (createResult > 0) {
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public Integer deleteUser(User u) {
		Integer id = -1;
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("id", u.getId());
		String deleteUserQuery = "DELETE from user where id = :id";
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(deleteUserQuery, 
				params, keyHolder);
		if (createResult > 0) {
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public Boolean updatePassword(User u, String newPass) {
		Integer result;
		Map<String, Object> params = new HashMap<>();
		params.put("newPass", newPass);
		params.put("id", u.getId());
		String updateSql = "UPDATE user SET password = :newPass where id = :id";
		result = mariaDbJdbcTemplate.update(updateSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}

	@Override
	public Boolean addToFavorites(User u, Fighter f) {
		if(u.getCount() > 4) {
			return false;
		}
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("userId", u.getId());
		params.addValue("fighterId", f.getId());
		params.addValue("num", u.getCount() + 1);
		String createUserQuery = "INSERT into favorites (userID, fighterID, number) VALUES "
				+ "(:userId,:fighterId,:num)";
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createUserQuery, 
				params, keyHolder);
		if (createResult > 0) {
			return true;
		}	
	}

}
