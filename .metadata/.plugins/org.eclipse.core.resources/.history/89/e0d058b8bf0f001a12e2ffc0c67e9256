package com.perscholas.css_selectors.selenium_tests;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumXPathTest {
	
	private static WebDriver driver;
	@BeforeClass
	public static void setUp() {
		System.setProperty("webdriver.chrome.driver", "C:\\Users\\Student\\Desktop\\libraries_and_tools\\chromedriver.exe");
		driver = new ChromeDriver();
		driver.get("http://localhost:8080/Selenium_CSS_Selectors/HomeServlet/xPath1");
	}
	@AfterClass
	public static void shutDown() {
		driver.close();
	}
	
	@Test
	public void xPathAbsolutePathTest() {		
		/* Using XPath to find an element at the basic level is similar to finding an 
		 * element by CSS selector. The absolute path of the target element begins 
		 * with "html/" and then proceeds through the document tree. The drawback to 
		 * using an absolute path is that if any part of the path changes in the 
		 * future then the XPath string will return an error when attempting to locate 
		 * the target element. This isn't a huge problem on this web page, but it could 
		 * be on web page with a large number of lines and elements. */
		 String actual = driver.findElement(By.xpath("html/body/header/h1")).getText();
		 assertThat(actual, equalTo("Selenium XPath Demonstration - Main Page"));
	}
	
	@Test
	public void xPathRelativePathTest() {
		/* This test uses a relative path to find the target element. The relative 
		 * path begins with two forward slashes ("//") and can begin at any unique 
		 * position in the document. In this case, our starting point is the second 
		 * div element from the first "family" of div elements. Most XPath strings will 
		 * utilize the relative path because it reduces the length and complexity of 
		 * the string which makes it easier to deal with changes made to the HTML 
		 * document. Here we also see examples of using integers in square brackets to 
		 * specify the "child" of a "parent" tag. */
		String actual = driver.findElement(By.xpath("//*/div[2]/div[2]/p[2]")).getText();
		assertThat(actual, equalTo("div2 div2 p2"));
	}
	
	
}
