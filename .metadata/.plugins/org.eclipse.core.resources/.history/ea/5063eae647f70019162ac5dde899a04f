package DAOs;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import classes.Fighter;
import classes.User;

public class UserDAO {

	//connection check
	public static boolean testConnection() {
		
		try {
			MariaDBConnection connect = new MariaDBConnection();
			Connection conn = null;
			conn = connect.getConnection();
			if(conn != null) {
				System.out.println("Connected");
			}
			conn.close();
			return true;
		}
		catch(Exception e) {
			System.out.println("Failed to connect");
			return false;
		}
	}
	
	//method to validate a user login
	public static boolean login(String username, String password) {
		//creating mariaDB connection and a Connection object to run queries on
		MariaDBConnection connect = new MariaDBConnection();
		Connection conn = null;
		
		//query to compare password
		String getPass = "SELECT password FROM user WHERE username=?";
		
		try {
			conn = connect.getConnection();
			PreparedStatement stmt = conn.prepareStatement(getPass);
			stmt.setString(1, username);
		}
	}
	
	//method to register a new user
	public static boolean createtUser(User u) {
				
		//creating mariaDB connection and a Connection object to run queries on
		MariaDBConnection connect = new MariaDBConnection();
		Connection conn = null;
		
		//create insert query format
		String insertQuery = "INSERT INTO user (username, password) VALUES (?, ?)";
		
		try {
			//creating a local instance of the connection object and a statement object
			conn = connect.getConnection();
			//creating an instance of prepareStatement, calling 
			//prepareStatement method of connection object, with query as parameter
			PreparedStatement stmt = conn.prepareStatement(insertQuery);
			
			//setting the column values of the insert query
			stmt.setString(1, u.getUsername());
			stmt.setString(2, u.getPassword());
						
			//executing insert query
			stmt.executeUpdate();			
			//close connection
			conn.close();
			System.out.println("Inserted " + u.getUsername());
			return true;
		}
		catch(Exception e) {
			System.out.println("Insert failed");
			return false;
		}				
	}
	
	//delete with name input
	public static boolean deleteFighter(String name) {
		//creating mariaDB connection and a Connection object to run queries on
		MariaDBConnection connect = new MariaDBConnection();
		Connection conn = null;
		
		//create delete query format
		String deleteQuery = "DELETE FROM user WHERE username=?";
		
		try {
			//creating a local instance of the connection object and a statement object
			conn = connect.getConnection();
			//creating an instance of prepareStatement, calling 
			//prepareStatement method of connection object, with query as parameter
			PreparedStatement stmt = conn.prepareStatement(deleteQuery);
		
		//setting the column values of the delete query
		stmt.setString(1, name);			
		
		//executing delete query
		stmt.execute();			
		//close connection
		conn.close();
		System.out.println("User deleted");
		return true;
		}
		catch(Exception e) {
			System.out.println("Delete failed");
			return true;
		}
	}
	
	//update a user's password
	public static boolean updateUserPassword(String username, String newPass) {
		
		//creating mariaDB connection and a Connection object to run queries on
		MariaDBConnection connect = new MariaDBConnection();
		Connection conn = null;
		
		//create update query format
		String updateQuery = "UPDATE user SET password=? WHERE username=?";
		
		try {
			//creating a local instance of the connection object and a statement object
			conn = connect.getConnection();
			//creating an instance of prepareStatement, calling 
			//prepareStatement method of connection object, with query as parameter
			PreparedStatement stmt = conn.prepareStatement(updateQuery);
			
			//setting the column values of the delete query
			stmt.setString(1, newPass);
			stmt.setString(2, username);
						
			//executing delete query
			stmt.execute();			
			//close connection
			conn.close();
			System.out.println("Updated password successfully");
			return true;
		}
		catch(Exception e) {
			System.out.println("Update failed");
			return false;
		}
				
	}
	
	
	
}
